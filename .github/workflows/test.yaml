on: push

jobs:
  test:
    runs-on: ubuntu-latest
    container: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: 'ubuntu:16.04'
          - os: 'ubuntu:18.04'
          - os: 'ubuntu:20.04'
          - os: 'ubuntu:22.04'
          - os: 'debian:9'
          - os: 'debian:10'
          - os: 'debian:11'
          - os: 'debian:12'
          - os: 'fedora:32'
          - os: 'fedora:33'
          - os: 'fedora:34'
          - os: 'fedora:35'
          - os: 'fedora:36'
          - os: 'fedora:37'
          - os: 'centos:7'
          - os: 'archlinux'
          - os: 'alpine'

    steps:
      - if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'debian')
        run: |
          apt-get update -y
          apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev \
          libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
          xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git gcc
          apt-get install -y gcc-10 || echo Failed to install GCC 10
        env:
          DEBIAN_FRONTEND: noninteractive

      - if: startsWith(matrix.os, 'fedora')
        run: |
          dnf install -y make gcc g++ zlib-devel bzip2 bzip2-devel readline-devel sqlite \
          sqlite-devel openssl-devel tk-devel libffi-devel xz-devel git findutils
          dnf install -y compat-gcc-32 || echo Failed to install GCC 10

      - if: startsWith(matrix.os, 'centos')
        run: |
          yum install -y gcc g++ make zlib-devel bzip2 bzip2-devel readline-devel sqlite \
          sqlite-devel openssl-devel tk-devel libffi-devel xz-devel git

      - if: startsWith(matrix.os, 'archlinux')
        run: |
          pacman -Sy --noconfirm --needed base-devel openssl zlib xz tk git

      - if: startsWith(matrix.os, 'alpine')
        run: |
          apk add --no-cache git bash build-base libffi-dev openssl-dev bzip2-dev \
          zlib-dev xz-dev readline-dev sqlite-dev tk-dev linux-headers git

      - uses: actions/checkout@v3
        with:
          repository: 'filips123/pyenv'
          ref: 'add-cinder-3.10'

      - name: Versions
        run: |
          echo === LDD ===
          ldd --version || echo ldd not found!
          echo == GCC ===
          gcc --version || echo gcc not found!
          echo === G++ ===
          g++ --version || echo g++ not found!
          echo == CLANG ===
          clang --version || echo clang not found!

      - run: |
          export PYENV_ROOT="$GITHUB_WORKSPACE"
          echo "PYENV_ROOT=$PYENV_ROOT" >> $GITHUB_ENV
          echo "$PYENV_ROOT/shims:$PYENV_ROOT/bin" >> $GITHUB_PATH

      - run: |
          command -v "gcc-10" && export CC="gcc-10" && echo Setting GCC 10
          pyenv install -v cinder-3.10-dev
          pyenv global cinder-3.10-dev

      - run: python --version
      - run: python -m pip --version
